<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>基本的Gantt调用-向日葵甘特开发范例-我要调度网</title>
<link rel="shortcut icon" href="/favicon.ico"/>
<meta name="keywords" content="SFGantt,甘特图,向日葵甘特,gantt,Ajax,project,Javascript,API"/>
<link href="/site/default.css" rel="stylesheet" type="text/css" />
<script language="javascript" src="../gantt.js" charset="gb2312"></script>
<script language="javascript">
	var gtData,gtMap;
	function onLoad()//在页面初始化的时候执行本函数
	{
		SFAjax.loadXml("test.xml",onGanttLoaded);	//通过Ajax模式下载对应的XML文件，并在下载完成之后执行onDataLoaded函数
	}
	function onGanttLoaded(doc)	//doc参数是一个XML文件DOM对象
	{
	   var gtConfig = new SFConfig();//初始化一个页面上的配置对象
		gtConfig.setConfig("SFGantt/container", "Div_Gantt");//设置用来显示甘特图的层的ID
		//gtConfig.setConfig("SFGanttTasksMap/taskBarRightField", "Name");//设置任务甘特条右边显示内容
		//gtConfig.setConfig("SFGanttTasksMap/taskBarCenterField","WorkNo"); //设置任务甘特条中间显示内容
		//gtConfig.setConfig("SFGanttTasksMap/taskBarTopField", "WorkNo");///设置任务甘特条上方显示内容
		//gtConfig.setConfig("SFGanttTasksMap/taskBarLeftField","Start"); //设置任务甘特条左边显示内容
		gtConfig.setConfig("SFGanttTasksMap/taskBarBottomField", "WorkNo");//设置任务甘特条下方显示内容
		gtConfig.setConfig("SFGantt/itemHeight", 40);//设置用来显示甘特图的层的ID
		//gtConfig.setConfig("SFGantt/inline", true);//设置用来显示甘特图的层的ID
		//gtConfig.setConfig("SFGantt/hideSummary",true);
		gtConfig.setConfig("SFGantt/isTracking", true);
		gtConfig.setConfig("SFGanttTasksMap/disableDragChangePercent", true);
		gtConfig.setConfig("SFGanttField/dateShowFormat", "yyyy-MM-dd");
		gtConfig.setConfig("SFGantt/listWidth", 300);//左侧列表的宽度
		//设置用来显示甘特图的层的ID
		//因为这个属性会不断变化，所以我们采取了插件的方式
		gtConfig.setConfig("SFGantt/taskIdFieldNames", "ID");//设置甘特图编号列显示的字段，缺省为空,这里将其设置为ID
		var adapter = new SFDataXml(doc);

		//自定扩展一个责任人域，设置一个负责人维护域Dutier
		//设置责任人字段，通知适配器adapter从xml中读取这个属性，这样Task对象会扩展出Dutier属性,
		//注意第二个参数的大小写与xml标签相同
		adapter.addTaskProperty("Dutier", "DUTIER", SFDataRender.types.String);
		adapter.addTaskProperty('BaselineStart',	'BaselineStart',	SFDataRender.types.Time);
		adapter.addTaskProperty('BaselineFinish',	'BaselineFinish',	SFDataRender.types.Time);
		//第二步：用setTaskField函数来设置责任人甘特属性域，域显示方式headstyle,bodystyle,inputstyle可使用样式表,支持更灵活的显示方式
		var field1 = new SFGanttField( {
			width : 100, bodyData : 'Dutier', inputData : 'Dutier', headText : '负责人', headStyle :  {
				textAlign : 'center'
			},
			bodyStyle :  {
				textAlign : 'right'
			}
		})
		SFGanttField.setTaskField("Dutier", field1);
		var list = {
			'A' : 'A_总图规划', 'B' : 'B_初步设计', 'C' : 'C_概算分析', 'D' : 'D_施工图设计', 'E' : 'E_预算分析', 'F' : 'F_招投标', 'G' : 'G_设备采购技术参数的确定', 'H' : 'H_询价', 'I' : 'I_报价会签', 'J' : 'J_议价审批', 'K' : 'K_施工图审查', 'L' : 'L_设备制造', 'M' : 'M_设备安装', 'N' : 'N_证照申请', 'P' : 'P_运输', 'Q' : 'Q_构件预制', 'R' : 'R_施工管理', 'S' : 'S_单体试车', 'T' : 'T_无负荷联动试车', 'U' : 'U_验收申请', 'V' : 'V_竣工档案整理', 'W' : 'W_验收'
		};
		adapter.addTaskProperty("WorkNo", "WorkNo", SFDataRender.types.String);
		//第二步：用setTaskField函数来设置责任人甘特属性域，域显示方式headstyle,bodystyle,inputstyle可使用样式表,支持更灵活的显示方式
		SFGanttField.setTaskField("WorkNo", new SFGanttFieldSelecter( {
			width : 120, bodyData : 'WorkNo', headText : '作业代号', headStyle :  {
				textAlign : 'center'
			},
			bodyStyle :  {
				textAlign : 'right'
			},
			options : list
		}));

		adapter.addTaskProperty("GanttType", "GanttType", SFDataRender.types.String);
		var field3 = new SFGanttField( {
			width : 100, bodyData : 'GanttType', inputData : 'GanttType', headText : '甘特图类型', headStyle :  {
				textAlign : 'center'
			},
			bodyStyle :  {
				textAlign : 'right'
			}
		})
		SFGanttField.setTaskField("GanttType", field3);
		adapter.addTaskProperty("TaskUuid", "TaskUuid", SFDataRender.types.String);
		var field4 = new SFGanttField( {
			width : 100, bodyData : 'TaskUuid', inputData : 'TaskUuid', headText : '工程编号', headStyle :  {
				textAlign : 'center'
			},
			bodyStyle :  {
				textAlign : 'right'
			}
		})
		SFGanttField.setTaskField("TaskUuid", field4);

		adapter.addTaskProperty("Va001Uuid", "Va001Uuid", SFDataRender.types.String);
		var field5 = new SFGanttField( {
			width : 100, bodyData : 'Va001Uuid', inputData : 'Va001Uuid', headText : '项目编号', headStyle :  {
				textAlign : 'center'
			},
			bodyStyle :  {
				textAlign : 'right'
			}
		})
		SFGanttField.setTaskField("Va001Uuid", field5);
		adapter.addTaskProperty("ProjectNo", "ProjectNo", SFDataRender.types.String);
		var field6 = new SFGanttField( {
			width : 80, bodyData : 'ProjectNo', inputData : 'ProjectNo', headText : '工程编号', headStyle :  {
				textAlign : 'center'
			},
			bodyStyle :  {
				textAlign : 'right'
			}
		})
		SFGanttField.setTaskField("ProjectNo", field6);
		var field7 = new SFGanttField( {
			width : 100, bodyData : 'ConstCode', inputData : 'ConstCode', headText : '施工项目代号', headStyle :  {
				textAlign : 'left'
			},
			bodyStyle :  {
				textAlign : 'right'
			}
		})
		SFGanttField.setTaskField("ConstCode", field7);
		adapter.addTaskProperty("TaskIsSummary", "TaskIsSummary", SFDataRender.types.Bool2Int);
		SFGanttField.addTaskField("TaskIsSummary", 50, '关键任务', SFGanttField.NormalHead, SFGanttField.BoolBody, SFGanttField.BoolCheckbox, "TaskIsSummary", "TaskIsSummary");
		//修改已有甘特域的显示属性和输入属性
		//SFGanttField.getTaskField("OutlineNumber").setHeadText("WBS");//设置显示方式
		SFGanttField.getTaskField("Name").setHeadText("工程名称");
		SFGanttField.getTaskField("ActualFinish").setHeadText("实际完成时间");
		SFGanttField.getTaskField("Start").setInputHandle(InputHandle_DateTime);//设置开始日期输入方式
		SFGanttField.getTaskField("Finish").setInputHandle(InputHandle_DateTime);//设置结束日期输入方式
		SFGanttField.getTaskField("BaselineStart").setInputHandle(InputHandle_DateTime);//设置开始日期输入方式
		SFGanttField.getTaskField("BaselineFinish").setInputHandle(InputHandle_DateTime);//设置结束日期输入方式
		SFGanttField.getTaskField("ProjectNo").setReadOnly(true);
		SFGanttField.getTaskField("ActualStart").setReadOnly(true);
		SFGanttField.getTaskField("ActualFinish").setReadOnly(true);
		//设置甘特图显示字段属性
		gtConfig.setConfig("SFGantt/taskFieldNames", "StatusIcon,TaskIsSummary,Name,WorkNo,ProjectNo,Start,Finish,BaselineStart,BaselineFinish,ActualStart,ActualFinish,Duration,Dutier");//设置甘特图显示的字段列表
	//	gtConfig.setConfig("SFGantt/imgPath", "image/");
		gtConfig.setConfig("SFGanttTasksMap/taskNoticeFields", "WorkNo,Name,Start,Finish,Duration");
		gtConfig.setConfig("SFData/taskReadonlyIgnoreProperty", "Collapse,LineHeight,Selected,ID")
		//初始化甘特图数据对象
		gtData = new SFData(adapter, gtConfig);
		//初始化甘特图日志对象，初始化日志对象后，系统才会记录修改日志，用于向后台发送修改内容。设置记录日志内容
		gtLog = new SFDataLogging(gtData);
		gtLog.setTaskFields("TaskUuid,TaskIsSummary,Name,Start,Finish,BaselineStart,BaselineFinish,WorkNo,Summary,PercentComplete,Dutier,Notes,GanttType,Va001Uuid")

		//添加插件
		//添加大纲级别插件
		gtData.addComponent(new SFDataOutlineComponent());//使用向日葵甘特SFDataOutlineComponent数据插件
		gtData.addComponent(new SFDataIDComponent());//使用向日葵甘特SFDataIDComponent数据插件 
		//根据配置和数据产生甘特数据
		gtMap = new SFGantt(gtConfig);
		//设置甘特图的事件
		//增加甘特图事件SFEvent.addListener
		//第一个参数为gantt数据 gtData
		//第二个参数为事件名称 
		//第三个参数为事件激发时的调用函数
		SFEvent.addListener(gtData, "aftertaskadd", onAfterTaskAdd);//添加任务之后调用事件产生唯一顺序号guid
		SFEvent.addListener(gtData, "beforelinkadd", onBeforeLinkAdd)//添加链接之前调用该事件
		SFEvent.addListener(gtData, "afterlinkadd", onAfterLinkAdd);//添加链接之后调用事件产生唯一顺序号guid
		SFEvent.addListener(gtData, "beforelinkchange", onBeforeLinkChange)//修改链接后调用该事件
		SFEvent.addListener(gtData, "beforetaskchange", onBeforeTaskChange);//任务属性赋值事件
		SFEvent.addListener(gtData, "aftertaskchange", onAfterTaskChange);//任务属性赋值事件
	//	SFEvent.addListener(gtMap, "linkclick", onLinkdblClick);//链接线点击事件任务属性赋值事件
		SFEvent.addListener(gtMap, "beforeinline", function (returnObj, task, pTask) {
			if (task.getProperty("ProjectNo") != pTask.getProperty("ProjectNo")) {
				returnObj.returnValue = false;
			}
		});//链接线点击事件任务属性赋值事件
		SFEvent.addListener(gtMap, "taskdblclick", onTaskDblClick);
		SFEvent.addListener(gtData, "taskpropertyread", onTaskPropertyRead);//设置在读取任务属性之前调用onTaskPropertyRead函数
		//计算所有任务的工期，任务都按照固定工期进行运算。
		gtMap.setData(gtData);
		initDuration();

		/*gtMap.addControl(aaa=new SFGanttProgressLine("2009-12-02 18:00:00",{
				vertexImg:'http://www.51diaodu.cn/sfgantt/img/task_head_20.gif',
				vertexSize:[10,10],
				vertexStyle:{border:'solid 1px green'},
				lineColor:'black',
				lineWeight:1
			}));*/
		var time = SFGlobal.getDate(gtData.rootElement.Task.Name);
		//增加项目进度线
		pgl = new SFGanttProgressLine(gtData.rootElement.Task.Name);
		gtMap.addControl(pgl);

		gtMap.addTimeLine(time, false, 
		{
			borderStyle : 'dotted', backgroundColor : 'red'
		});
		//甘特图显示，第一个参数用于甘特图初始化显示时的 左边界，第二个参数用于显示比例
		gtMap.showMap(new Date(), 3);

	}

//function(){ 
//    alert(arguments[0].childNodes[0].childNodes[0].childNodes[5].childNodes[0].childNodes[13].childNodes[0].textContent);
//alert(1);
//alert(arguments[0].childNodes[0].childNodes[0].childNodes[5].childNodes[0].childNodes[13].childNodes[0]);
//globalTest002=arguments;
// onGanttLoaded(arguments)}
//在任务属性被读取的时候调用的函数
//参数returnObj用来对参数的读取进行拦截
//参数task是对应的任务
//参数proName是正在读取的属性
function onTaskPropertyRead(returnObj, task, proName) {
    if (proName == "ClassName")//假如是读取ClassName属性,ClassName属性用于设置任务样式
    {
        if (!task.getProperty("Summary") && task.getProperty("TaskIsSummary") == 1) {
            //如果任务不是一个大纲，并且已经完成
            returnObj.returnValue = false;//设置使用自定义返回值,即不使用系统返回值
            returnObj.value = "TaskImportant";//设置自定义的值,returnObj.returnValue为false的情况下这个值将会作为任务的属性被返回	
        }
    }
}

//处理向日葵甘特图组件日期格式的输入方法
function InputHandle_DateTime(cell, task, list) {
    if (task.getProperty("Summary"))//如果是一个大纲任务，则不允许修改
    {
        this.showBody(cell, task, list);
        return;
    }
    var inputData = this.inputData;//当前正在修改的字段名称
    var field = this;//当前的SFGanttField对象
    var value = task.getProperty(inputData);//获得当前的默认值
    function onSelect(calendar, date) {
        if (!calendar.dateClicked) {
            return;
        }
        task.setProperty(inputData, calendar.date);
        task.update();
        calendar.callCloseHandler();
    }

    function onClose(calendar) {
        calendar.hide();
        calendar.destroy();
        field.showBody(cell, task, list);
    }
    var cal = new Calendar(1, value, onSelect, onClose);
    cal.weekNumbers = false;
    cal.showsTime = true;
    cal.create();
    cell.appendChild(document.createTextNode(SFGlobal.getDateString(value, 'yyyy年MM月dd日')));
    cal.showAtElement(cell);
}

function save() {

    var xmlDom = gtLog.getXml();//获得更新记录的XML文件
    var strLog = SFAjax.getXmlString(xmlDom);
    //alert("发送到后台的更改记录为：\n" + strLog);
    var params = [];
    //在这里计算出此任务的顺序
    params.push("action=save");
    params.push("t=" + new Date().valueOf());
    params.push("uid=" + projectUid);

    SFAjax.loadXml("../servlet/ganttServlet?" + params.join("&"), function (doc) {
        if (doc.documentElement.getAttribute("errorCode") == "0") {
            gtLog.clear();//如果存盘成功，就重置所有变更信息
            alert("数据保存成功！");
        }
        else {
            alert("?" + params.join("&"));
            alert(doc.documentElement.firstChild ? doc.documentElement.firstChild.nodeValue : "未知错误");
        }

    },
false, strLog);

}

function add() {
    gtMap.addTask();
}
//任务添加后
function onAfterTaskAdd(newTask) {
    var starDate = new Date();
    var finishDate = new Date(starDate.getTime() + 24 * 3600 * 1000);
    newTask.setProperty("UID", new UUID());//任务添加完成后，将任务编号放在newTask对象中
    newTask.setProperty("Start", starDate);//任务添加完成后，自动设置开始时间
   // newTask.setProperty("BaselineStart", starDate);
    newTask.setProperty("GanttType", "B");//设置干特图类型
    newTask.setProperty("Finish", finishDate);//任务添加完成后，自动设置任务结束时间
   // newTask.setProperty("BaselineFinish", finishDate);//任务添加完成后，自动设置任务结束时间
}

function onBeforeLinkAdd(returnObj, sucTask, preTask, type) {
    var preStartTime, preFinishTime, sucStartTime, sucFinishTime;
    preStartTime = preTask.getProperty("Start");
    preFinishTime = preTask.getProperty("Finish");
    sucStartTime = sucTask.getProperty("Start");
    sucFinishTime = sucTask.getProperty("Finish");

    if ((preStartTime.valueOf() < sucStartTime.valueOf()) && (preFinishTime.valueOf() > sucStartTime.valueOf()) && (preFinishTime.valueOf() < sucFinishTime.valueOf()) || (preFinishTime.valueOf() < sucStartTime.valueOf())) {
        returnObj.returnValue = true;
    }
    else {
        returnObj.returnValue = false;
        alert("链接不能建立");
    }
}
//链接添加后,自动产生连接任务的uuid
function onAfterLinkAdd(link) {
    link.setProperty("UID", new UUID());//任务添加完成后，将任务编号放在newLink对象中
    var preStartTime, preFinishTime, sucStartTime, sucFinishTime;
    preStartTime = link.getPredecessorTask().getProperty("Start");
    preFinishTime = link.getPredecessorTask().getProperty("Finish");
    sucStartTime = link.getSuccessorTask().getProperty("Start");
    sucFinishTime = link.getSuccessorTask().getProperty("Finish");
    if ((preStartTime.valueOf() < sucStartTime.valueOf()) && (preFinishTime.valueOf() > sucStartTime.valueOf()) && (preFinishTime.valueOf() < sucFinishTime.valueOf())) {
        link.setProperty("Type", 3);
        return;
    }
    else if (preFinishTime.valueOf() < sucStartTime.valueOf()) {
        link.setProperty("Type", 1);
        return;
    }

}

function onBeforeLinkChange(returnObj, link, name, value) {
    var preStartTime, preFinishTime, sucStartTime, sucFinishTime;
    preStartTime = link.getPredecessorTask().getProperty("Start");
    preFinishTime = link.getPredecessorTask().getProperty("Finish");
    sucStartTime = link.getSuccessorTask().getProperty("Start");
    sucFinishTime = link.getSuccessorTask().getProperty("Finish");

    if (name == "Type" && value && (preStartTime.valueOf() < sucStartTime.valueOf()) && (preFinishTime.valueOf() > sucStartTime.valueOf()) && (preFinishTime.valueOf() < sucFinishTime.valueOf())) {
        if (value == 0 || value == 3) {
            returnObj.returnValue = true;
        }
        else {
            returnObj.returnValue = false;
            alert("链接类型不正确,不能修改!");
        }
    }
    else if (name == "Type" && value && preFinishTime.valueOf() < sucStartTime.valueOf()) {
        if (value == 0 || value == 3 || value == 1) {
            returnObj.returnValue = true;
        }
        else {
            returnObj.returnValue = false;
            alert("链接类型不正确,不能修改!");
        }
    }

}

function onBeforeTaskChange(returnObj, task, name, value, beforeValue) {
    var startTime;
    if (name == "BaselineStart" && value) {
        task.setProperty("Start", value);
        returnObj.returnValue = true;
    }
    if (name == "BaselineFinish" && value) {
        task.setProperty("Finish", value);
        returnObj.returnValue = true;
    }
    if (name == "Finish" && value && (startTime = task.getProperty("Start")) && startTime.valueOf() == value.valueOf()) {
        if (!window.confirm("需要将此任务更改为里程碑么？")) {
            returnObj.returnValue = false;
        }
    }

}

function onAfterTaskChange(task, name, value, beforeValue) {
    if (name == 'Finish' && !task.getProperty("Summary") && value && beforeValue) {
        //任务向后拖动时，如果后续任务的开始时间小于前继任务的完成时间，则自动移动后续任务至不违反约束
        var succTask, offset = value.valueOf() - beforeValue.valueOf();
        var aSuccTasks = task.getSuccessorTasks();
        for (var i = 0;i < aSuccTasks.length;i++) {
            succTask = aSuccTasks[i];//取得该链接的后续任务
            succTask.setProperty("Finish", new Date(succTask.getProperty("Finish").valueOf() + offset));
            succTask.setProperty("Start", new Date(succTask.getProperty("Start").valueOf() + offset));
        }
    }

}

function onTaskDblClick(task, type, field) {

    var str = "您双击了一个任务!\n";
    str += "任务名称:" + task.getProperty("Name") + "\n";
    if (type == "list") {
        str += "是在列表上双击任务的\n";
        str += "双击的列名称:" + field + "\n";
        if (field == "Name") {
            tempTask = task;
            if (!task.ReadOnly) {
                modalWin();
            }
        }
    }
    else if (type == "map") {
        str += "是在图表上双击任务的\n";
    }

}

function showTaskDialog(task) {
    var retValue = window.showModalDialog("F00vd001_3", "", "status:no;dialogWidth:400px;dialogHeight:400px");
    if (retValue) {
        task.setProperty("Name", retValue.projectName);
        task.setProperty("TaskUuid", retValue.taskUuid);
        task.setProperty("Va001Uuid", projectUid);
        task.setProperty("ProjectNo", retValue.projectNo);
    }
}

function modalWin() {
    window.open("F00vd001_3?compId=" + compId + "&va001Uuid=" + projectUid, "", "height=400,width=600,toolbar=no,directories=no,status=no,menubar=no,scrollbars=no,resizable=no,modal=yes");
}

function refresh() {
    tempTask.setProperty("Name", ret.projectName);
    tempTask.setProperty("TaskUuid", ret.taskUuid);
    tempTask.setProperty("Va001Uuid", projectUid);
    tempTask.setProperty("ProjectNo", ret.projectNo);
}

//日期相加函数
function dateAdd(interval, number, date) {
    var dt = new Date(date.valueOf());

    switch (interval.toLowerCase()) {
        case "y":
            return new Date(dt.setFullYear(dt.getFullYear() + number));
        case "m":
            return new Date(dt.setMonth(dt.getMonth() + number));
        case "d":
            return new Date(dt.setDate(dt.getDate() + number));
        case "w":
            return new Date(dt.setDate(dt.getDate() + 7 * number));
        case "h":
            return new Date(dt.setHours(dt.getHours() + number));
        case "n":
            return new Date(dt.setMinutes(dt.getMinutes() + number));
        case "s":
            return new Date(dt.setSeconds(dt.getSeconds() + number));
        case "l":
            return new Date(dt.setMilliseconds(dt.getMilliseconds() + number));
    }
}

//日期差异函数
function dateDiff(strInterval, dtStart, dtEnd) {
    switch (strInterval) {
        case 's':
            return parseInt((dtEnd - dtStart) / 1000);
        case 'n':
            return parseInt((dtEnd - dtStart) / 60000);
        case 'h':
            return parseInt((dtEnd - dtStart) / 3600000);
        case 'd':
            return parseInt((dtEnd - dtStart) / 86400000);
        case 'w':
            return parseInt((dtEnd - dtStart) / (86400000 * 7));
        case 'm':
            return (dtEnd.getMonth() + 1) + ((dtEnd.getFullYear() - dtStart.getFullYear()) * 12) - (dtStart.getMonth() + 1);
        case 'y':
            return dtEnd.getFullYear() - dtStart.getFullYear();
        case 'd-h':
            return parseFloat((dtEnd - dtStart) / 86400000).toFixed(2);
    }
}

//由于原任务中不含工期数据，这里先按照当前的计划开始和计划结束计算工期
function initDuration() {
    for (var task = gtData.getRootTask();task != null;task = task.getNextTask()) {
        task.getSuccessorTasks();
        task.setProperty("Duration", dateDiff("s", task.getProperty("Start"), task.getProperty("Finish")));
    }
}
var linkControl, linkIsVisible;

function displayLink() {
    if (!linkControl) {
        var controls = gtMap.controls;
        for (var i = controls.length - 1;i >= 0;i--) {
            if (controls[i].drawLinks) {
                linkControl = controls[i];
                linkIsVisible = true;
            }
        }
    }
    if (linkIsVisible) {
        gtMap.removeControl(linkControl);
        linkIsVisible = false;
    }
    else {
        gtMap.addControl(linkControl);
        linkIsVisible = true;
    }
}

function displayPgl() {
    //gtMap.removeControl(pgl);
    //	var pgl;//进度线
    if (pglIsVisible) {
        gtMap.removeControl(pgl);
        pglIsVisible = false;
    }
    else {
        gtMap.addControl(pgl);
        pglIsVisible = true;
    }
}
</script>
</head>
<body onload="onLoad()">
<script language="javascript" src="/site/top.js" charset="utf-8"></script>
<div id="content">
	<h3>范例:基本的Gantt调用</h3>
	<input type=button id="aaaaa"  value="aaaaaaaaaa" onClick="javaScript:test();">
	<div id="Div_Gantt" style="position:relative;width:80%;height:400px;border:solid 1px black"></div>
	<div class="bg2">
		<h3>范例:基本的Gantt调用</h3>
		<p>查看<b>本页面源文件</b>可以了解如何使用SFGantt Javascript API实现本功能；</p>
		<p>您可以通过上面显示的甘特图进行浏览,该界面的操作方式与Project软件类似，通过；左侧的纵向滚动条，您可以浏览整个项目进程，而下方左侧的滚动条用来浏览每个项目的所有列表信息，而下方右侧的滚动条用来改变甘特图的时间轴。</p>
		<p>在左侧列表之中点击右键，有一个简单的右键菜单，可以快速的执行一些与该任务对应的操作，还可以打开"任务信息"的窗口进行编辑操作；</p>
		<p>在右侧列表之中点击右键，可以放大或缩小右边的甘特图；</p>
		<p>鼠标放在甘特图的中间分割条上，鼠标形状会变成横向拖动状态，这个时候可以拖动鼠标，调整左侧列表区和右侧图表区的大小；</p>
		<p>鼠标放在甘特图右下角的斜三角上，鼠标形状会变成对角斜线状态，这个时候可以拖动鼠标改变整个甘特图的大小；</p>
		<p><a href="../">返回范例列表</a></p>
	</div>
</div>
<script language="javascript" src="/site/bottom.js" charset="utf-8"></script>
</body>
</html>