<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>任务联动-向日葵甘特开发范例-我要调度网</title>
<link rel="shortcut icon" href="/favicon.ico"/>
<meta name="keywords" content="SFGantt,甘特图,向日葵甘特,gantt,Ajax,project,Javascript,API"/>
<link href="/site/default.css" rel="stylesheet" type="text/css" />
<script language="javascript" src="../gantt.js" charset="utf-8"></script>
<script language="javascript">
	var gtData,gtMap;
	function onLoad()//在页面初始化的时候执行本函数
	{
		SFAjax.loadXml("test.xml",onGanttLoaded);	//通过Ajax模式下载对应的XML文件，并在下载完成之后执行onDataLoaded函数
	}
	function onGanttLoaded(doc)	//doc参数是一个XML文件DOM对象
	{
		var gtConfig=new SFConfig();	//初始化一个页面上的配置对象
		gtConfig.setConfig("SFGantt/container","Div_Gantt");	//设置用来显示甘特图的层的ID
		adapter=new SFDataProject(doc);
		//为任务增加一个工期属性
		adapter.addTaskProperty("Duration","Duration",SFDataRender.types.Float);
		gtData=new SFData(adapter);	//将doc对象初始化为一个甘特数据对象
		gtMap=new SFGantt(gtConfig,gtData);	//用相应的数据对象和配置对象创建甘特对象
		gtMap.showMap(null,6);		//显示甘特图




		//计算所有任务的工期，任务都按照固定工期进行运算。
		initDuration();


		//增加甘特图事件SFEvent.addListener
		//第一个参数为gantt数据 gtData
		//第二个参数为事件名称 
		//第三个参数为事件激发时的调用函数
		SFEvent.addListener(gtData,"taskpropertywrite",onTaskPropertyWrite);//任务属性赋值事件

	}
			
		//第一个参数为返回值
		//第二个参数为task对象 
		//第三个参数为修改字段名称
		//第四个参数为即将写入task的值
	function onTaskPropertyWrite(returnObj,task,name,value)
	{
		
		if(name=='Finish'&&!task.getProperty("Summary"))
		{
			//任务向后拖动时，如果后续任务的开始时间小于前继任务的完成时间，则自动移动后续任务至不违反约束
			var succTask;
			var aSuccTasks=task.getSuccessorTasks();
		
			for(var i=0;i<aSuccTasks.length;i++)
			{
				
				succTask=aSuccTasks[i];//取得该链接的后续任务

				if(succTask.getProperty("Start")<value)
				{
					succTask.setProperty("Start",value);
					succTask.setProperty("Finish",dateAdd("s",succTask.getProperty("Duration"),succTask.getProperty("Start")));
					succTask.update();
				}

			}
		}
	}







	


	//由于原任务中不含工期数据，这里先按照当前的计划开始和计划结束计算工期
	function initDuration()
	{
		
		for(var task=gtData.getRootTask();task!=null;task=task.getNextTask())
		{
			task.getSuccessorTasks();
			task.setProperty("Duration",dateDiff("s",task.getProperty("Start"),task.getProperty("Finish")) );	
		}
	}



//日期相加函数
function dateAdd(interval,number,date){
	 var dt=new Date(date.valueOf());

	 switch(interval.toLowerCase()){
	  case "y": return new Date(dt.setFullYear(dt.getFullYear()+number));
	  case "m": return new Date(dt.setMonth(dt.getMonth()+number));
	  case "d": return new Date(dt.setDate(dt.getDate()+number));
	  case "w": return new Date(dt.setDate(dt.getDate()+7*number));
	  case "h": return new Date(dt.setHours(dt.getHours()+number));
	  case "n": return new Date(dt.setMinutes(dt.getMinutes()+number));
	  case "s": return new Date(dt.setSeconds(dt.getSeconds()+number));
	  case "l": return new Date(dt.setMilliseconds(dt.getMilliseconds()+number));
	 } 
}




//日期差异函数
function dateDiff (strInterval, dtStart,dtEnd) {    
      switch (strInterval) {   
         case 's' :return parseInt((dtEnd - dtStart) / 1000); 
         case 'n' :return parseInt((dtEnd - dtStart) / 60000); 
         case 'h' :return parseInt((dtEnd - dtStart) / 3600000); 
         case 'd' :return parseInt((dtEnd - dtStart) / 86400000); 
         case 'w' :return parseInt((dtEnd - dtStart) / (86400000 * 7)); 
         case 'm' :return (dtEnd.getMonth()+1)+((dtEnd.getFullYear()-dtStart.getFullYear())*12) - (dtStart.getMonth()+1); 
         case 'y' :return dtEnd.getFullYear() - dtStart.getFullYear();
         case 'd-h' :return parseFloat((dtEnd - dtStart) / 86400000).toFixed(2);
      } 
} 




</script>
</head>
<body onload="onLoad()">
<script language="javascript" src="/site/top.js" charset="utf-8"></script>
<div id="content">
	<h3>范例:任务联动</h3>
	<div id="Div_Gantt" style="position:relative;width:890px;height:400px;border:solid 1px black"></div>
	<div class="bg2">
		<h3>范例:任务联动</h3>
		<p>查看<b>本页面源文件</b>可以了解如何使用SFGantt Javascript API实现本功能；</p>
<p>　　本范例模仿MS Project任务拖动时的自动计算功能,暂时未考虑日历。 </p>
<ul>
　　<li>1）任务向后拖动时，如果该任务的完成时间超过后续任务的开始时间，则后续任务自动向后推移至不违反约束。程序向后推移任务会产生一种递归联动的效果。 </li>
　　<li>2）本范例采用gtData对象的taskpropertywrite事件递归实现任务联动</li>


</ul>		
<p><a href="../">返回范例列表</a></p>

	</div>
</div>
<script language="javascript" src="/site/bottom.js" charset="utf-8"></script>
</body>
</html>