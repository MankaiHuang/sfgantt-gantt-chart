<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>计算关键路径-向日葵甘特开发范例-我要调度网</title>
<link rel="shortcut icon" href="/favicon.ico"/>
<meta name="keywords" content="SFGantt,甘特图,向日葵甘特,gantt,Ajax,project,Javascript,API"/>
<link href="/site/default.css" rel="stylesheet" type="text/css" />
<script language="javascript" src="http://www.51diaodu.cn/sfgantt/js/gantt.js.aspx" charset="utf-8"></script>
<script language="javascript">
	var gtData,gtMap;
	var icount=0;
	function onLoad()//在页面初始化的时候执行本函数
	{
		SFAjax.loadXml("test.xml",onGanttLoaded);	//通过Ajax模式下载对应的XML文件，并在下载完成之后执行onDataLoaded函数
	}
	function onGanttLoaded(doc)	//doc参数是一个XML文件DOM对象
	{
		var gtConfig=new SFConfig();	//初始化一个页面上的配置对象
		gtConfig.setConfig("SFGantt/container","Div_Gantt");	//设置用来显示甘特图的层的ID


		
		adapter=new SFDataProject(doc);
		adapter.addTaskProperty("EarlyStart","EarlyStart",SFDataRender.types.Time);
		adapter.addTaskProperty("EarlyFinish","EarlyFinish",SFDataRender.types.Time);
		adapter.addTaskProperty("LateStart","LateStart",SFDataRender.types.Time);
		adapter.addTaskProperty("LateFinish","LateFinish",SFDataRender.types.Time);
		adapter.addTaskProperty("Duration","Duration",SFDataRender.types.Float);
		adapter.addTaskProperty("IsKeyTask","IsKeyTask",SFDataRender.types.Bool2Int);



		SFGanttField.addTaskField("EarlyStart",50,'最早开始',SFGanttField.NormalHead,SFGanttField.DateBody,SFGanttField.DateInput,"EarlyStart","EarlyStart");
		SFGanttField.addTaskField("EarlyFinish",50,'最早结束',SFGanttField.NormalHead,SFGanttField.DateBody,SFGanttField.DateInput,"EarlyFinish","EarlyFinish");
		SFGanttField.addTaskField("LateStart",50,'最完开始',SFGanttField.NormalHead,SFGanttField.DateBody,SFGanttField.DateInput,"LateStart","LateStart");
		SFGanttField.addTaskField("LateFinish",50,'最晚结束',SFGanttField.NormalHead,SFGanttField.DateBody,SFGanttField.DateInput,"LateFinish","LateFinish");
		SFGanttField.addTaskField("IsKeyTask",50,'关键任务',SFGanttField.NormalHead,SFGanttField.BoolBody,SFGanttField.BoolCheckbox,"IsKeyTask","IsKeyTask");
	
		
		gtConfig.setConfig("SFGantt/taskFieldNames","StatusIcon,Name,Start,Finish,IsKeyTask,EarlyStart,EarlyFinish,LateStart,LateFinish");	//设置在列表之中显示哪些列




		gtData=new SFData(adapter);	//将doc对象初始化为一个甘特数据对象
		gtMap=new SFGantt(gtConfig,gtData);	//用相应的数据对象和配置对象创建甘特对象
		gtMap.showMap(null,4);		//显示甘特图

		//计算所有任务的工期，任务都按照固定工期进行运算。
		init();
	}


	//向前递归推动任务
	function forwardPush(task,earlystart)
	{
		var succTask;
		var aSuccTasks=task.getSuccessorTasks();

		task.setProperty("EarlyStart",earlystart);
		task.setProperty("EarlyFinish",dateAdd("s",task.getProperty("Duration"),earlystart));
		task.update();

		
		
		for(var i=0;i<aSuccTasks.length;i++)
		{
			succTask=aSuccTasks[i];//取得该链接的后续任务
			
			if(succTask.getProperty("EarlyStart")< task.getProperty("EarlyFinish"))
			{
				//进行递归调用
				//alert(task.getProperty("Name"));
				forwardPush(succTask,task.getProperty("EarlyFinish"));
			}

		}
	}


	//向后递归推动任务
	function backPull(task,latefinish)
	{
		var predTask;
		var aPredTasks=task.getPredecessorTasks();

		task.setProperty("LateFinish",latefinish);
		task.setProperty("LateStart",dateAdd("s",-task.getProperty("Duration"),latefinish));
		task.update();
		
		
		for(var i=0;i<aPredTasks.length;i++)
		{
			predTask=aPredTasks[i];//取得该链接的后续任务
			
			if(predTask.getProperty("LateFinish")> task.getProperty("LateStart"))
			{
				//进行递归调用
				backPull(predTask,task.getProperty("LateStart"));
			}

		}
	}


		//由于原任务中不含工期数据，需要先按照当前的计划开始和计划结束计算工期
	function init()
	{

		for(var clsTask=gtData.getRootTask();clsTask!=null;clsTask=clsTask.getNextTask())
		{
			//任务工期按照天数进行计算
			clsTask.setProperty("Duration",dateDiff("s",clsTask.getProperty("Start"),clsTask.getProperty("Finish")) );	
			//先给日期赋初值
			if(!clsTask.getProperty("Summary"))
			{
			clsTask.setProperty("EarlyStart",new Date(0));	
			clsTask.setProperty("EarlyFinish",new Date(0));	
			clsTask.setProperty("LateStart",new Date(9999,9,9));	
			clsTask.setProperty("LateFinish",new Date(9999,9,9));	
			clsTask.update();
			}
		}
	}


	function CriticalPath(){
		var startTask;
		var endTask;
		var clsTask;
		//找到起点任务
		for( clsTask=gtData.getRootTask();clsTask!=null;clsTask=clsTask.getNextTask())
		{
			if(!clsTask.getProperty("Summary")&&clsTask.getPredecessorTasks().length==0)
			{
				startTask=clsTask;

			}
		}
		
		//向后计算每个任务的最早开始时间
		forwardPush(startTask,startTask.getProperty("Start"));
		


		//找到终点任务

		for( clsTask=gtData.getRootTask();clsTask!=null;clsTask=clsTask.getNextTask())
		{
			if(!clsTask.getProperty("Summary")&&clsTask.getSuccessorTasks().length==0)
			{
				endTask=clsTask;
				break;
			}
		}
		
		//向前计算每个任务的最晚完成时间
		backPull(endTask,endTask.getProperty("EarlyFinish"));
	
	
		//如果最早开始时间=最晚开始时间，则该任务为关键路径上的任务
		for( clsTask=gtData.getRootTask();clsTask!=null;clsTask=clsTask.getNextTask())
		{

			if(!clsTask.getProperty("Summary")&&clsTask.getProperty("EarlyStart").toString()==clsTask.getProperty("LateStart").toString())
			{
					clsTask.setProperty("IsKeyTask",true);
					if(clsTask.getProperty("Duration")>0)//里程碑不采用这种样式
						clsTask.setProperty("ClassName","TaskImportant");
					else
						clsTask.setProperty("ClassName","MilestoneCircle");
					clsTask.update();
			}
		}


		//将关键路径的链接线改称不同样式显示,从起点任务开始
		SetKeyLinkStyle(startTask)
		

	}

	
	function SetKeyLinkStyle(task)
	{
		var succTask;
		var succLink;
		var aSuccLinks=task.getSuccessorLinks();

		for(var i=0;i<aSuccLinks.length;i++)
		{
			succLink=aSuccLinks[i]
			succTask=succLink.getSuccessorTask();   //取得该链接的后续任务
			if(succTask.getProperty("IsKeyTask"))//如果后续任务也是关键任务
			{
				succLink.setProperty("ClassName","RedDashed");  
				succLink.update();
				//进行递归调用
				SetKeyLinkStyle(succTask);
			}

		}
	}




//日期相加函数
function dateAdd(interval,number,date){
	 var dt=new Date(date.valueOf());

	 switch(interval.toLowerCase()){
	  case "y": return new Date(dt.setFullYear(dt.getFullYear()+number));
	  case "m": return new Date(dt.setMonth(dt.getMonth()+number));
	  case "d": return new Date(dt.setDate(dt.getDate()+number));
	  case "w": return new Date(dt.setDate(dt.getDate()+7*number));
	  case "h": return new Date(dt.setHours(dt.getHours()+number));
	  case "n": return new Date(dt.setMinutes(dt.getMinutes()+number));
	  case "s": return new Date(dt.setSeconds(dt.getSeconds()+number));
	  case "l": return new Date(dt.setMilliseconds(dt.getMilliseconds()+number));
	 } 
}




//日期差异函数
function dateDiff (strInterval, dtStart,dtEnd) {    
      switch (strInterval) {   
         case 's' :return parseInt((dtEnd - dtStart) / 1000); 
         case 'n' :return parseInt((dtEnd - dtStart) / 60000); 
         case 'h' :return parseInt((dtEnd - dtStart) / 3600000); 
         case 'd' :return parseInt((dtEnd - dtStart) / 86400000); 
         case 'w' :return parseInt((dtEnd - dtStart) / (86400000 * 7)); 
         case 'm' :return (dtEnd.getMonth()+1)+((dtEnd.getFullYear()-dtStart.getFullYear())*12) - (dtStart.getMonth()+1); 
         case 'y' :return dtEnd.getFullYear() - dtStart.getFullYear();
         case 'd-h' :return parseFloat((dtEnd - dtStart) / 86400000).toFixed(2);
      } 
} 



</script>
</head>
<body onload="onLoad()">
<script language="javascript" src="/site/top.js" charset="utf-8"></script>
<div id="content">
	<h3>范例:计算关键路径</h3>
	<p align="center"><Input Type="Button" Value="计算关键路径" onClick="CriticalPath()"></P>
	<div id="Div_Gantt" style="position:relative;width:890px;height:400px;border:solid 1px black"></div>
	<div class="bg2">
		<h3>范例:计算关键路径</h3>
		<p>点击“计算关键路径”按钮计算本项目的关键路径，关键路径上的任务用红色显示，链接线用红色虚线显示</p>
		<p>查看<b>本页面源文件</b>可以了解如何使用SFGantt Javascript API实现本功能；</p>
		<p>关键路径法(Critical Path Method,CPM) </p>
<p>
　　关键路径算法是一种网络图方法，由雷明顿-兰德公司(Remington- Rand)的JE克里(JE Kelly)和杜邦公司的MR沃尔克(MR Walker)在1957年提出的，用于对化工工厂的维护项目进行日程安排。它适用于有很多作业而且必须按时完成的项目。关键路线法是一个动态系统，它会随着项目的进展不断更新，该方法采用单一时间估计法，其中时间被视为一定的或确定的。  </p>
关键路径算法  
<ul>
　　<li>1）画出网络图，以节点标明事件，由箭头代表作业。这样可以对整个项目有一个整体概观。习惯上项目开始于左方终止于右方。  </li>
　<li>2）在箭头上标出每项作业的持续时间（T） </li>
　　<li>3）从左面开始，计算每项作业的最早结束时间（EF）。该时间等于最早可能的开始时间（ES）加上该作业的持续时间。  </li>
　<li>4）当所有的计算都完成时，最后算出的时间就是完成整个项目所需要的时间。 </li>
　　<li>5）从右边开始，根据整个项目的持续时间决定每项作业的最迟结束时间（LF）。</li>  
　<li>6）最迟结束时间减去作业的持续时间得到最迟开始时间（LS）。</li>
　<li>7）每项作业的最迟结束时间与最早结束时间，或者最迟开始时间与最早开始时间的差额就是该作业的时差。</li>  　<li>8）如果某作业的时差为零，那么该作业就在关键路线上。 </li>
　　<li>9）项目的关联路线就是所有作业的时差为零的路线。</li>
</ul>		
		<p><a href="../">返回范例列表</a></p>
	</div>
</div>
<script language="javascript" src="/site/bottom.js" charset="utf-8"></script>
</body>
</html>